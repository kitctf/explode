#!/bin/env -S uv run
# -*- coding: utf-8 -*-
# Template by explode

from pwn import ELF, args, context, gdb, log, process, remote

{{if not shell_target}}
exe = context.binary = ELF(args.EXE or {target})
{{endif}}

{{if terminal}}
context.update(terminal={terminal})
{{endif}}

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
host = args.HOST or {host}
port = int(args.PORT) if args.PORT else {port}

# TODO: SSH support

# TODO: libc upport

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
{{if not shell_target}}
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(host, port{{if ssl}}, ssl = True{{endif}})
    else:
        return process([exe.path] + argv, *a, **kw)
{{else}}
if args.REMOTE:
        return remote(host, port{{if ssl}}, ssl = True{{endif}})
    else:
        return process([{target}] + argv, *a, **kw)
{{endif}}


{{if not shell_target}}
# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = ("tbreak main\nc" if 'main' in exe.symbols else f"tbreak *0x\{exe.entry:x}") + f'''
'''
{{endif}}


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()
flag = None

{{if not shell_target}}
# shellcode = asm(shellcraft.sh())
# payload = fit(\{
#     32: 0xdeadbeef,
#     'iaaa': [1, 2, 'Hello', 3]
# }, length=128)
# io.send(payload)
{{endif}}

if flag:
    log.success(flag)
else:
    log.warning("No flag yet :(")
    io.interactive()

